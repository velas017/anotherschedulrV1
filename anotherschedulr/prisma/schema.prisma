// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([userId, provider]) // Prevent multiple accounts from same provider
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  accounts      Account[]
  sessions      Session[]
  
  // Business-specific fields
  businessName  String?
  phone         String?
  timezone      String?   @default("UTC")
  
  // Relations
  appointments      Appointment[]
  clients           Client[]
  services          Service[]
  serviceCategories ServiceCategory[]
  schedulingPage    SchedulingPage?
  blockedTimes      BlockedTime[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business models
model Client {
  id           String   @id @default(cuid())
  name         String
  email        String
  phone        String?
  notes        String?
  
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  appointments Appointment[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // in minutes
  price       Float
  isVisible   Boolean  @default(true)
  sortOrder   Int      @default(0)
  paddingTime Int      @default(0) // buffer time after appointment
  isPrivate   Boolean  @default(false) // only bookable by direct link
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId  String?
  category    ServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  appointments Appointment[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Appointment {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  serviceId   String?
  service     Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  sortOrder   Int       @default(0)
  isVisible   Boolean   @default(true)
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  services    Service[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SchedulingPage {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  isPublic        Boolean  @default(true)
  customDomain    String?
  welcomeMessage  String?
  
  // Theme and styling
  primaryColor    String   @default("#000000")
  secondaryColor  String   @default("#6b7280")
  fontFamily      String   @default("Inter")
  customCSS       String?
  
  // Business hours and settings
  businessHours   String?  // JSON string for business hours
  timezone        String   @default("UTC")
  
  // Booking settings
  allowOnlineBooking Boolean @default(true)
  requireApproval    Boolean @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BlockedTime {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  startTime       DateTime
  endTime         DateTime
  reason          String?
  
  // Recurrence settings
  isRecurring     Boolean  @default(false)
  recurrenceType  RecurrenceType? // DAILY, WEEKLY, MONTHLY
  recurrenceEnd   DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, startTime, endTime])
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
}